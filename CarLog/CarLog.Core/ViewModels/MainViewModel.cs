using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Text;
using Windows.Storage;
using Windows.Storage.Streams;
using System.Linq;
using CarLog.Core.Resources;
using CarLog.Core.DataModel;
using CarLog.Core.Helpers;

namespace CarLog.Core.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        /// <summary>
        /// MainViewModel constructor. Creates a new collection of Cars
        /// </summary>
        public MainViewModel()
        {
            this.Cars = new ObservableCollection<Car>();
        }

        /// <summary>
        /// ObservableCollection of cars to keep track of
        /// </summary>
        public ObservableCollection<Car> Cars { get; private set; }

        /// <summary>
        /// ObservableCollection of all fuel events attached to cars.
        /// Generated by going through each car in Cars and grabbing its
        /// fuel events
        /// </summary>
        public ObservableCollection<FuelEvent> AllFuelEvents
        {
            get
            {
                ObservableCollection<FuelEvent> allFuelEvents = new ObservableCollection<FuelEvent>();

                foreach (Car car in this.Cars)
                {
                    foreach (FuelEvent fuelEvent in car.FuelEvents)
                    {
                        allFuelEvents.Add(fuelEvent);
                    }
                }                

                this.SortEvents(allFuelEvents);
                
                return allFuelEvents;
            }
        }

        /// <summary>
        /// Collection containing the latest 10 fuel events
        /// </summary>
        public ObservableCollection<FuelEvent> Last10FuelEvents
        {
            get
            {
                try
                {
                    return new ObservableCollection<FuelEvent>(this.AllFuelEvents.Take(20));
                }
                catch
                {
                    return new ObservableCollection<FuelEvent>();
                }
            }
        }

        /// <summary>
        /// ObservableCollection of all service events attached to cars.
        /// Generated by going through each car in Cars and grabbing its
        /// service events
        /// </summary>
        public ObservableCollection<ServiceEvent> AllServiceEvents
        {
            get
            {
                ObservableCollection<ServiceEvent> allServiceEvents = new ObservableCollection<ServiceEvent>();

                foreach (Car car in this.Cars)
                {
                    foreach (ServiceEvent serviceEvent in car.ServiceEvents)
                    {
                        allServiceEvents.Add(serviceEvent);
                    }
                }

                this.SortEvents(allServiceEvents);

                return allServiceEvents;
            }
        }

        /// <summary>
        /// Collection containing the latest 10 service events
        /// </summary>
        public ObservableCollection<ServiceEvent> Last10ServiceEvents
        {
            get
            {
                try
                {
                    return new ObservableCollection<ServiceEvent>(this.AllServiceEvents.Take(20));
                }
                catch
                {
                    return new ObservableCollection<ServiceEvent>();
                }
            }
        }

        /// <summary>
        /// ObservableCollection of all reminders attached to cars.
        /// Generated by going through each car in Cars and grabbing its
        /// reminders
        /// </summary>
        public ObservableCollection<Reminder> AllReminders
        {
            get
            {
                ObservableCollection<Reminder> allReminders = new ObservableCollection<Reminder>();

                foreach (Car car in this.Cars)
                {
                    foreach (Reminder reminder in car.Reminders)
                    {
                        allReminders.Add(reminder);
                    }
                }

                this.SortEvents(allReminders);

                return allReminders;
            }
        }

        /// <summary>
        /// Collection containing the latest 10 reminders
        /// </summary>
        public ObservableCollection<Reminder> Last10Reminders
        {
            get
            {
                try
                {
                    return new ObservableCollection<Reminder>(this.AllReminders.Take(20));
                }
                catch
                {
                    return new ObservableCollection<Reminder>();
                }
            }
        }

        /// <summary>
        /// Keeps track of if the data is loaded or not
        /// </summary>
        public bool IsDataLoaded
        {
            get;
            set;
        }
               
        /// <summary>
        /// Refreshes the last 10 fuel events collection
        /// </summary>
        public void RefreshLast10FuelEvents()
        {
            this.NotifyPropertyChanged("Last10FuelEvents");
        }

        /// <summary>
        /// Refreshes the last 10 service event collection
        /// </summary>
        public void RefreshLast10ServiceEvents()
        {
            this.NotifyPropertyChanged("Last10ServiceEvents");
        }

        /// <summary>
        /// Refreshes the last 10 reminder collection
        /// </summary>
        public void RefreshLast10Reminders()
        {
            this.NotifyPropertyChanged("Last10Reminders");
        }

        /// <summary>
        /// Refreshes all event collections
        /// </summary>
        public void RefreshAllEvents()
        {
            this.NotifyPropertyChanged("AllFuelEvents");
            this.NotifyPropertyChanged("AllServiceEvents");
            this.NotifyPropertyChanged("AllReminders");
            this.NotifyPropertyChanged("Last10FuelEvents");
            this.NotifyPropertyChanged("Last10ServiceEvents");
            this.NotifyPropertyChanged("Last10Reminders");
        }

        /// <summary>
        /// Loads all the data from DataFolder/DataFile.txt
        /// </summary>
        public async Task LoadData()
        {
            await FileHelper.LoadData(this);

            foreach (Car car in this.Cars)
            {
                car.SetOdometer();
                car.UpdateFuelEventDistance();
                await this.UpdateReminderDateTime();
                this.SortEvents(car.FuelEvents);
                this.SortEvents(car.ServiceEvents);
                this.SortEvents(car.Reminders);
                this.SetEventCarTitles();
            }            

            this.RefreshAllEvents();
        }

        public async Task SaveData()
        {
            await FileHelper.SaveData(this);

            foreach (Car car in this.Cars)
            {
                car.SetOdometer();
                car.UpdateFuelEventDistance();
                await this.UpdateReminderDateTime();
                this.SortEvents(car.FuelEvents);
                this.SortEvents(car.ServiceEvents);
                this.SortEvents(car.Reminders);
                this.SetEventCarTitles();
            }

            this.RefreshAllEvents();
        }

        /// <summary>
        /// PropertyChangedEventHandler event
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// The actual property changed event handler
        /// </summary>
        /// <param name="propertyName">The name of the property that has changed</param>
        private void NotifyPropertyChanged(String propertyName)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (null != handler)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));                
            }
        }

        /// <summary>
        /// Sorts the collection of events passed in
        /// </summary>
        /// <param name="events">The fuel event collection to sort</param>
        public void SortEvents(ObservableCollection<FuelEvent> events)
        {
            ObservableCollection<FuelEvent> sortedEvents = new ObservableCollection<FuelEvent>(events.OrderByDescending(f => f.DateTime).ThenByDescending(f => f.Odometer));

            events.Clear();

            foreach (FuelEvent f in sortedEvents)
            {
                events.Add(f);
            }

            this.NotifyPropertyChanged("AllFuelEvents");            
        }

        /// <summary>
        /// Sorts the collection of events passed in
        /// </summary>
        /// <param name="events">The servcice event collection to sort</param>
        public void SortEvents(ObservableCollection<ServiceEvent> events)
        {
            ObservableCollection<ServiceEvent> sortedEvents = new ObservableCollection<ServiceEvent>(events.OrderByDescending(s => s.DateTime).ThenByDescending(s => s.Odometer));

            events.Clear();

            foreach (ServiceEvent s in sortedEvents)
            {
                events.Add(s);
            }

            this.NotifyPropertyChanged("AllServiceEvents");            
        }

        /// <summary>
        /// Sorts the collection of events passed in
        /// </summary>
        /// <param name="events">The reminder collection to sort</param>
        public void SortEvents(ObservableCollection<Reminder> events)
        {
            ObservableCollection<Reminder> sortedEvents = new ObservableCollection<Reminder>(events.OrderByDescending(r => r.ReminderDateTime).ThenByDescending(r => r.Odometer));

            events.Clear();

            foreach (Reminder r in sortedEvents)
            {
                events.Add(r);
            }

            this.NotifyPropertyChanged("AllReminders");
        }

        /// <summary>
        /// Finds a car by its guid
        /// </summary>
        /// <param name="id">The guid of the car to find</param>
        /// <returns>The car that was found or null if no car was found</returns>
        public Car FindCar(Guid id)
        {
            try
            {
                return Cars.First(c => c.ID == id);
            }
            catch
            {
                return null;
            }            
        }

        /// <summary>
        /// Finds a car by the fuel event it contains
        /// </summary>
        /// <param name="fuelEvent">The fuel event to find in a car</param>
        /// <returns>The car that contained the fuel event or null if none was found</returns>
        public Car FindCar(FuelEvent fuelEvent)
        {
            try
            {
                return Cars.First(c => c.FuelEvents.Contains(fuelEvent));
            }
            catch
            {
                return null;
            }                        
        }

        /// <summary>
        /// Finds a car by the service event it contains
        /// </summary>
        /// <param name="serviceEvent">The service event to find in a car</param>
        /// <returns>The car that contained the service event or null if none was found</returns>
        public Car FindCar(ServiceEvent serviceEvent)
        {
            try
            {
                return Cars.First(c => c.ServiceEvents.Contains(serviceEvent));
            }
            catch
            {
                return null;
            }              
        }

        /// <summary>
        /// Finds a car by the reminder it contains
        /// </summary>
        /// <param name="reminder">The reminder to find in a car</param>
        /// <returns>The car that contained the reminder or null if none was found</returns>
        public Car FindCar(Reminder reminder)
        {
            try
            {
                return Cars.First(c => c.Reminders.Contains(reminder));
            }
            catch
            {
                return null;
            }
        }

        public void SetEventCarTitles()
        {
            foreach (FuelEvent fuelEvent in this.AllFuelEvents)
            {
                fuelEvent.CarTitle = this.FindCar(fuelEvent).Title;
            }

            foreach (ServiceEvent serviceEvent in this.AllServiceEvents)
            {
                serviceEvent.CarTitle = this.FindCar(serviceEvent).Title;
            }

            foreach (Reminder reminderEvent in this.AllReminders)
            {
                reminderEvent.CarTitle = this.FindCar(reminderEvent).Title;
            }
        }

        /// <summary>
        /// Finds a fuel event by its guid
        /// </summary>
        /// <param name="id">The guid to look for</param>
        /// <returns>The fuel event that had id searched for or null if none was found</returns>
        public FuelEvent FindFuelEvent(Guid id)
        {
            try
            {
                return this.AllFuelEvents.First(f => f.ID == id);
            }
            catch
            {
                return null;
            }            
        }

        /// <summary>
        /// Finds a service event by its guid
        /// </summary>
        /// <param name="id">The guid to look for</param>
        /// <returns>The service event that had id searched for or null if none was found</returns>
        public ServiceEvent FindServiceEvent(Guid id)
        {
            try
            {
                return this.AllServiceEvents.First(s => s.ID == id);
            }
            catch
            {
                return null;
            }            
        }

        /// <summary>
        /// Finds a reminder by its guid
        /// </summary>
        /// <param name="id">The guid to look for</param>
        /// <returns>The reminder that had id searched for or null if none was found</returns>
        public Reminder FindReminder(Guid id)
        {
            try
            {
                return this.AllReminders.First(r => r.ID == id);
            }
            catch
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes a car
        /// </summary>
        /// <param name="remove">The car to remove</param>
        /// <returns></returns>
        public async Task DeleteCar(Car remove)
        {
            this.Cars.Remove(remove);            

            this.NotifyPropertyChanged("AllFuelEvents");
            this.NotifyPropertyChanged("Last10FuelEvents");
            this.NotifyPropertyChanged("AllServiceEvents");
            this.NotifyPropertyChanged("Last10ServiceEvents");
            this.NotifyPropertyChanged("AllReminders");
            this.NotifyPropertyChanged("Last10Reminders");

            await this.SaveData();
        }

        /// <summary>
        /// Deletes a fuel event
        /// </summary>
        /// <param name="remove">The fuel event to remove</param>
        /// <returns></returns>
        public async Task DeleteFuelEvent(FuelEvent remove)
        {
            Car car = this.FindCar(remove);

            if (car != null)
            {
                if (car.FuelEvents.Remove(remove))
                {
                    car.SetOdometer();
                    car.UpdateFuelEventDistance();
                    this.SortEvents(car.FuelEvents);                    
                }
            }          

            remove.RecordStatus = RecordStatus.Delete;
            remove.SyncStatus = SyncStatus.Unsynced;
            remove.UpdateDate = DateTime.UtcNow;

            this.NotifyPropertyChanged("AllFuelEvents");
            this.NotifyPropertyChanged("Last10FuelEvents");

            await this.SaveData();
        }

        /// <summary>
        /// Deletes a service event
        /// </summary>
        /// <param name="remove">The service event to remove</param>
        /// <returns></returns>
        public async Task DeleteServiceEvent(ServiceEvent remove)
        {
            Car car = this.FindCar(remove);

            if (car != null)
            {
                if (car.ServiceEvents.Remove(remove))
                {
                    car.SetOdometer();
                    this.SortEvents(car.ServiceEvents);
                }
            }

            remove.RecordStatus = RecordStatus.Delete;
            remove.SyncStatus = SyncStatus.Unsynced;
            remove.UpdateDate = DateTime.UtcNow;

            this.NotifyPropertyChanged("AllServiceEvents");
            this.NotifyPropertyChanged("Last10ServiceEvents");

            await this.SaveData();
        }

        /// <summary>
        /// Deletes a reminder
        /// </summary>
        /// <param name="remove">The reminder to remove</param>
        /// <returns></returns>
        public async Task DeleteReminder(Reminder remove)
        {
            Car car = this.FindCar(remove);

            if (car != null)
            {
                if (car.Reminders.Remove(remove))
                {
                    //car.SetOdometer();
                    this.SortEvents(car.Reminders);
                }
            }

            remove.RecordStatus = RecordStatus.Delete;
            remove.SyncStatus = SyncStatus.Unsynced;
            remove.UpdateDate = DateTime.UtcNow;

            this.NotifyPropertyChanged("AllReminders");
            this.NotifyPropertyChanged("Last10Reminders");

            await this.SaveData();
        }

        /// <summary>
        /// Updates all the reminders in the background so they have the correct due date
        /// </summary>
        public async Task UpdateReminderDateTime()
        {
            await Task.Run(new Func<Task>(this.UpdateReminderDateTimeTask));            
        }

        /// <summary>
        /// Updates all the reminders so they have the correct due date
        /// </summary>
        private async Task UpdateReminderDateTimeTask()
        {
            Car car;
            Double distancePerDay;
            Double daysTillReminder;

            foreach (Reminder _reminder in this.AllReminders)
            {

                try
                {
                    car = this.FindCar(_reminder);
                }
                catch
                {
                    break;
                }

                try
                {
                    distancePerDay = car.AverageDistancePerFillUp / car.AverageDaysBetweenFillUp;
                    daysTillReminder = (_reminder.Odometer + _reminder.Distance - car.CurrentOdometer) / distancePerDay;
                }
                catch
                {
                    distancePerDay = 1;
                    daysTillReminder = 0;
                }

                try
                {
                    if (_reminder.ReminderType == DataModel.ReminderType.Date)
                    {
                        _reminder.ReminderDateTime = _reminder.EndDate;
                    }
                    else if (_reminder.ReminderType == DataModel.ReminderType.DistanceSince)
                    {
                        if (daysTillReminder < 0 || Double.IsNaN(daysTillReminder))
                        {
                            daysTillReminder = 0;
                        }

                        _reminder.ReminderDateTime = _reminder.DateTime.AddDays(daysTillReminder);
                    }
                    else if (_reminder.ReminderType == DataModel.ReminderType.MonthsSince)
                    {
                        _reminder.ReminderDateTime = _reminder.DateTime.AddMonths(_reminder.Months);
                    }
                    else if (_reminder.ReminderType == DataModel.ReminderType.Odometer)
                    {
                        if (daysTillReminder < 0 || Double.IsNaN(daysTillReminder))
                        {
                            daysTillReminder = 0;
                        }
                        _reminder.ReminderDateTime = DateTime.Now.AddDays(daysTillReminder);
                    }
                    else if (_reminder.ReminderType == DataModel.ReminderType.MonthsOrDistanceSince)
                    {
                        if (daysTillReminder < 0 || Double.IsNaN(daysTillReminder))
                        {
                            daysTillReminder = 0;
                        }
                        _reminder.ReminderDateTime = DateTime.Now.AddDays(daysTillReminder) < _reminder.DateTime.AddMonths(_reminder.Months) ? DateTime.Now.AddDays(daysTillReminder) : _reminder.DateTime.AddMonths(_reminder.Months);
                    }
                    else
                    {
                        _reminder.ReminderDateTime = _reminder.DateTime;
                    }
                }
                catch
                {
                    _reminder.ReminderDateTime = _reminder.DateTime;
                }
            }            
        }
    }
}